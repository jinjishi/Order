package intership2.dao;
import java.sql.SQLException;
import java.util.ArrayList;

import intership2.dao.DbcpJdbcUtil;
import intership2.dao.Order;
import java.sql.Connection; 
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.lang.Exception;
public class OrderDAOImpl implements OrderDAO {
	public boolean addOrder(Order order) throws Exception {
		boolean result=false;
		Connection connection = null; 
		PreparedStatement pStatement = null; 
		try { 
			connection = DbcpJdbcUtil.getConnection(); 
		    String sql = "use shopping insert into Order(Orderid,Date,Condition,Nickname,Address,Consignee) values (?,?,?,?,?,?)";
		    pStatement = connection.prepareStatement(sql);
			pStatement.setString(1,order.GetterOrderid()); 
		    pStatement.setString(2,order.GetterDate()); 
		    pStatement.setString(3,order.GetterCondition()); 
		    pStatement.setString(4,order.GetterNickname());
		    pStatement.setString(5,order.GetterAddress()); 
		    pStatement.setString(6,order.GetterConsignee());
		    pStatement.execute(); 
		    result=true;
		    System.out.println("result="+result);
		    pStatement.close(); 
		} catch (SQLException e) { 
			e.printStackTrace();
			result=false;
			} finally { 
				try { 
					connection.close();
					} catch (SQLException e) { 
						e.printStackTrace();
						}
				}
		return result;
		}
	public boolean delOrder(String sql) throws Exception {
		boolean result=false;
		Connection connection = null; 
		PreparedStatement pStatement = null; 
		try {
			connection = DbcpJdbcUtil.getConnection(); 
			pStatement = connection.prepareStatement(sql); 
			pStatement.execute();  
			int count=pStatement.getUpdateCount();
			if(count!=-1) {
				result=true;
			}
			else {
				result=false;
			}
			System.out.println("result="+result);
		}catch (SQLException e) { 
			e.printStackTrace();
			result=false;
			} finally { 
				try { 
					connection.close();
					} catch (SQLException e) { 
						e.printStackTrace();
						}
				}
		return result;
		}
	public ArrayList<Order> getOrder(String sql) throws Exception{
		PreparedStatement pStatement = null; 
		Connection connection = null;
		ArrayList<Order> orders=new ArrayList<Order>();
		boolean result=false;
		try {
			connection = DbcpJdbcUtil.getConnection(); 
		    pStatement =connection.prepareStatement(sql);
			ResultSet rs=pStatement.executeQuery();
			while(rs.next()) {
				Order order=new Order();
				order.SetterOrderid(rs.getString(1));
				order.SetterDate(rs.getString(2));
				order.SetterCondition(rs.getString(3));
				order.SetterNickname(rs.getString(4));
				order.SetterAddress(rs.getString(5));
				order.SetterConsignee(rs.getString(6));
				System.out.printf(order.GetterOrderid()+"\t");
				System.out.printf(order.GetterDate()+"\t");
				System.out.printf(order.GetterCondition()+"\t");
				System.out.printf(order.GetterNickname()+"\t");
				System.out.printf(order.GetterAddress()+"\t");
				System.out.printf(order.GetterConsignee()+"\n");
			}
			result=true;
			System.out.println("result="+result);
		}catch (SQLException e) { 
			e.printStackTrace();
			} 
				try { 
					connection.close();
					} catch (SQLException e) { 
						e.printStackTrace();
						}
				return orders;
				}
	@SuppressWarnings("null")
	public boolean updateorder(String sql) throws Exception
	{
		Connection connection = null;
		PreparedStatement pStatement = null; 
		boolean result=false;
		try {
			connection = DbcpJdbcUtil.getConnection(); 
			pStatement=connection.prepareStatement(sql);
			pStatement.execute();  
			int count=pStatement.getUpdateCount();
			if(count!=-1)
			{
				result=true;
			}
			else
			{
				result=false;
			}
			System.out.println("result="+result);
		}catch (SQLException e) { 
				e.printStackTrace();
				result=false;
				} finally { 
					try { 
						connection.close();
						} catch (SQLException e) { 
							e.printStackTrace();
							}
					}
			return result;
			}
	@Override
	public boolean updateOrder(String sql) throws Exception {
		// TODO Auto-generated method stub
		return false;
	}
	}
